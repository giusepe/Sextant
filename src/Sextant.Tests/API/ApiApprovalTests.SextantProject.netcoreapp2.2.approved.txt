[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETStandard,Version=v2.0", FrameworkDisplayName="")]
namespace Sextant
{
    public interface INavigable : Sextant.INavigated, Sextant.INavigating, Sextant.IViewModel { }
    public interface INavigated
    {
        System.IObservable<System.Reactive.Unit> WhenNavigatedFrom(Sextant.INavigationParameter parameter);
        System.IObservable<System.Reactive.Unit> WhenNavigatedTo(Sextant.INavigationParameter parameter);
    }
    public interface INavigating
    {
        System.IObservable<System.Reactive.Unit> WhenNavigatingTo(Sextant.INavigationParameter parameter);
    }
    public interface INavigationParameter : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<string, object>>, System.Collections.Generic.IDictionary<string, object>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, object>>, System.Collections.IEnumerable { }
    [System.ObsoleteAttribute("Please use the IViewModel interface.")]
    public interface IPageViewModel : Sextant.IViewModel { }
    public interface IParameterViewStackService
    {
        System.IObservable<System.Reactive.Unit> PopPage(Sextant.INavigationParameter parameter, bool animate = True);
        System.IObservable<System.Reactive.Unit> PushModal(Sextant.INavigable modal, Sextant.INavigationParameter parameter, string contract = null);
        System.IObservable<System.Reactive.Unit> PushPage(Sextant.INavigable navigableViewModel, Sextant.INavigationParameter parameter, string contract = null, bool resetStack = False, bool animate = True);
    }
    public interface IView
    {
        System.IObservable<Sextant.IViewModel> PagePopped { get; }
        System.IObservable<System.Reactive.Unit> PopModal();
        System.IObservable<System.Reactive.Unit> PopPage(bool animate = True);
        System.IObservable<System.Reactive.Unit> PopToRootPage(bool animate = True);
        System.IObservable<System.Reactive.Unit> PushModal(Sextant.IViewModel modalViewModel, string contract);
        System.IObservable<System.Reactive.Unit> PushPage(Sextant.IViewModel viewModel, string contract, bool resetStack, bool animate = True);
    }
    public interface IViewModel
    {
        string Id { get; }
    }
    public interface IViewStackService
    {
        System.IObservable<System.Collections.Immutable.IImmutableList<Sextant.IViewModel>> ModalStack { get; }
        System.IObservable<System.Collections.Immutable.IImmutableList<Sextant.IViewModel>> PageStack { get; }
        Sextant.IView View { get; }
        System.IObservable<System.Reactive.Unit> PopModal(bool animate = True);
        System.IObservable<System.Reactive.Unit> PopPage(bool animate = True);
        System.IObservable<System.Reactive.Unit> PopToRootPage(bool animate = True);
        System.IObservable<System.Reactive.Unit> PushModal(Sextant.IViewModel modal, string contract = null);
        System.IObservable<System.Reactive.Unit> PushPage(Sextant.INavigable page, string contract = null, bool resetStack = False, bool animate = True);
        System.IObservable<System.Reactive.Unit> PushPage(Sextant.IViewModel page, string contract = null, bool resetStack = False, bool animate = True);
        System.IObservable<Sextant.IViewModel> TopModal();
        System.IObservable<Sextant.IViewModel> TopPage();
    }
    public class NavigationView : Xamarin.Forms.NavigationPage, Sextant.IView, Splat.IEnableLogger
    {
        public NavigationView(System.Reactive.Concurrency.IScheduler mainScheduler, System.Reactive.Concurrency.IScheduler backgroundScheduler, ReactiveUI.IViewLocator viewLocator, Xamarin.Forms.Page rootPage) { }
        public NavigationView(System.Reactive.Concurrency.IScheduler mainScheduler, System.Reactive.Concurrency.IScheduler backgroundScheduler, ReactiveUI.IViewLocator viewLocator) { }
        public System.IObservable<Sextant.IViewModel> PagePopped { get; }
        public System.IObservable<System.Reactive.Unit> PopModal() { }
        public System.IObservable<System.Reactive.Unit> PopPage(bool animate) { }
        public System.IObservable<System.Reactive.Unit> PopToRootPage(bool animate) { }
        public System.IObservable<System.Reactive.Unit> PushModal(Sextant.IViewModel modalViewModel, string contract) { }
        public System.IObservable<System.Reactive.Unit> PushPage(Sextant.IViewModel viewModel, string contract, bool resetStack, bool animate) { }
    }
    public class static SextantHelper
    {
        [System.ObsoleteAttribute("Use the Initialize method.")]
        public static Sextant.NavigationView Initialise<TViewModel>(System.Reactive.Concurrency.IScheduler mainThreadScheduler = null, System.Reactive.Concurrency.IScheduler backgroundScheduler = null, ReactiveUI.IViewLocator viewLocator = null)
            where TViewModel :  class, Sextant.IViewModel { }
        public static Sextant.NavigationView Initialize<TViewModel>(System.Reactive.Concurrency.IScheduler mainThreadScheduler = null, System.Reactive.Concurrency.IScheduler backgroundScheduler = null, ReactiveUI.IViewLocator viewLocator = null)
            where TViewModel :  class, Sextant.IViewModel { }
        public static void RegisterNavigation<TView, TViewModel>(System.Reactive.Concurrency.IScheduler mainThreadScheduler = null, System.Reactive.Concurrency.IScheduler backgroundScheduler = null, ReactiveUI.IViewLocator viewLocator = null)
            where TView : ReactiveUI.IViewFor
            where TViewModel :  class, Sextant.IViewModel { }
        public static void RegisterView<TView, TViewModel>(string contract = null)
            where TView : ReactiveUI.IViewFor, new ()
            where TViewModel :  class, Sextant.IViewModel { }
    }
    public sealed class ViewStackService : Sextant.ViewStackServiceBase
    {
        public ViewStackService(Sextant.IView view) { }
    }
    public abstract class ViewStackServiceBase : Sextant.IViewStackService, Splat.IEnableLogger, System.IDisposable
    {
        protected ViewStackServiceBase(Sextant.IView view) { }
        protected Splat.IFullLogger Logger { get; }
        public System.IObservable<System.Collections.Immutable.IImmutableList<Sextant.IViewModel>> ModalStack { get; }
        protected System.Reactive.Subjects.BehaviorSubject<System.Collections.Immutable.IImmutableList<Sextant.IViewModel>> ModalSubject { get; }
        public System.IObservable<System.Collections.Immutable.IImmutableList<Sextant.IViewModel>> PageStack { get; }
        protected System.Reactive.Subjects.BehaviorSubject<System.Collections.Immutable.IImmutableList<Sextant.IViewModel>> PageSubject { get; }
        public Sextant.IView View { get; }
        protected static void AddToStackAndTick<T>(System.Reactive.Subjects.BehaviorSubject<System.Collections.Immutable.IImmutableList<T>> stackSubject, T item, bool reset) { }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public System.IObservable<System.Reactive.Unit> PopModal(bool animate = True) { }
        public System.IObservable<System.Reactive.Unit> PopPage(bool animate = True) { }
        protected static void PopRootAndTick<T>(System.Reactive.Subjects.BehaviorSubject<System.Collections.Immutable.IImmutableList<T>> stackSubject) { }
        protected static T PopStackAndTick<T>(System.Reactive.Subjects.BehaviorSubject<System.Collections.Immutable.IImmutableList<T>> stackSubject) { }
        public System.IObservable<System.Reactive.Unit> PopToRootPage(bool animate = True) { }
        public System.IObservable<System.Reactive.Unit> PushModal(Sextant.IViewModel modal, string contract = null) { }
        public System.IObservable<System.Reactive.Unit> PushPage(Sextant.INavigable viewModel, string contract = null, bool resetStack = False, bool animate = True) { }
        public System.IObservable<System.Reactive.Unit> PushPage(Sextant.IViewModel viewModel, string contract = null, bool resetStack = False, bool animate = True) { }
        public System.IObservable<Sextant.IViewModel> TopModal() { }
        public System.IObservable<Sextant.IViewModel> TopPage() { }
    }
}
namespace Sextant.Navigation
{
    public sealed class ParameterViewStackService : Sextant.ViewStackServiceBase, Sextant.IParameterViewStackService
    {
        public ParameterViewStackService(Sextant.IView view) { }
        public System.IObservable<System.Reactive.Unit> PopPage(Sextant.INavigationParameter parameter, bool animate = True) { }
        public System.IObservable<System.Reactive.Unit> PushModal(Sextant.INavigable modal, Sextant.INavigationParameter parameter, string contract = null) { }
        public System.IObservable<System.Reactive.Unit> PushPage(Sextant.INavigable navigableViewModel, Sextant.INavigationParameter parameter, string contract = null, bool resetStack = False, bool animate = True) { }
    }
}
namespace System.Reactive.Linq
{
    public class static SubscribeSafeExtensions { }
    public class static ToSignalExtension { }
    public class static WhereNotNullExtension { }
}